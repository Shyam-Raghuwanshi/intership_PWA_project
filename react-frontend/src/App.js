import Form from "./components/Form";
import React, { useEffect, useState } from "react";
import SignIn from "./components/(auth)/signin/page";
import SignUp from "./components/(auth)/signup/page";
import { BrowserRouter as Router, Routes, Route } from "react-router-dom";
import Footer from "./components/ui/footer";
import Header from "./components/ui/header";
import "./components/css/style.css";
import ResetPassword from "./components/(auth)/reset-password/page";
import "react-notifications/lib/notifications.css";
import ViewFriends from "./components/viewfriends";

import {
  NotificationContainer,
  NotificationManager,
} from "react-notifications";

export const metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

function App() {
  const token = localStorage.getItem("token");
  const [user, setUser] = useState();
  const [friendsCount, setFriendsCount] = useState(0);
  const [id, setId] = useState("");
  const [userName, setUserName] = useState(null);

  function isTokenExpired(token) {
    if (!token || token == null || token == undefined) {
      setUser(false);
      return;
    }
    try {
      const decodedToken = JSON.parse(atob(token.split(".")[1]));
      const expirationTime = decodedToken.exp;
      if (Date.now() >= expirationTime * 1000) {
        setUser(false);
      } else {
        setId(decodedToken.id);
        setUserName(decodedToken.name);
        setUser(true);
        setFriendsCount(decodedToken.friends.length);
      }
    } catch (error) {
      setUser(false);
      console.error("Error decoding or checking token:", error);
    }
  }

  function logout() {
    localStorage.removeItem("token");
    setId(null);
    setFriendsCount(0);
    setUserName(null);
    setUser(false);
    NotificationManager.success("You are logedout");
  }

  useEffect(() => {
    isTokenExpired(token);
  }, []);

  return (
    // <html lang="en">
    //   <body
    //     className={` font-inter antialiased bg-white text-gray-900 tracking-tight`}
    //   >
    //     <div className="flex flex-col min-h-screen overflow-hidden supports-[overflow:clip]:overflow-clip">
    <Router>
      <Header
        user={user}
        setUser={setUser}
        logout={logout}
        friendsCount={friendsCount}
        id={id}
        userName={userName}
      />
      <Routes>
        <Route
          path="/"
          element={<Form user={user} isTokenExpired={isTokenExpired} />}
        />
        <Route
          path="/signup"
          element={<SignUp user={user} setUser={setUser} isTokenExpired={isTokenExpired}/>}
        />
        <Route
          path="/signin"
          element={<SignIn user={user} setUser={setUser} isTokenExpired={isTokenExpired}/>}
        />
        <Route
          path="/viewfriends"
          element={
            <ViewFriends
              user={user}
              setFriendsCount={setFriendsCount}
              setId={setId}
              id={id}
              setUserName={setUserName}
            />
          }
        />
        <Route
          path="/chat"
          element={
            <ViewFriends
              user={user}
              setFriendsCount={setFriendsCount}
              setId={setId}
              id={id}
              setUserName={setUserName}
            />
          }
        />
        <Route path="/reset-password" element={<ResetPassword />} />
      </Routes>
      <Footer />
      <NotificationContainer />
    </Router>
    //     </div>
    //   </body>
    // </html>
  );
}

export default App;
